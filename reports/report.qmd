---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-gladysaya


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  *
from
  world_bank_data.wdi_country
where
  is_country = 0
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")



execute_ddl(cnx, """
create table wdi_country as
select *
from world_bank_data.wdi_country
where is_country = 1;
""")

# show number of records

```{python}
run_sql_and_return_html(cnx,"""
select count(*) as "Country Count"
from wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) as "Countries in 2020"
from wdi_country
where is_country = 1
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct country_region
from wdi_country
order by country_region
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  country_region,
  count(*) as num_countries
from
  wdi_country
group by
  country_region
order by
  num_countries desc
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
  country_name,
  country_region
from
  wdi_country
where
  lower(country_region) = 'north america'
order by
  country_name
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
  country_region,
  country_name,
  country_short_name
from
  wdi_country
where
  lower(country_name) = 'qatar'
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
  country_code,
  country_short_name,
  country_abbr,
  country_wb_abbr,
  country_region
from
  wdi_country
where
  country_abbr != country_wb_abbr
order by
  country_short_name
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select distinct country_income_group
from wdi_country
order by country_income_group
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
select
  country_income_group,
  count(*) as num_countries
from
  wdi_country
group by
  country_income_group
order by
  num_countries desc
""")

```

## Task 13

## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx, """
update wdi_country
set country_income_group = 'High income'
where country_name = 'Equatorial Guinea'
""")


```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx, """
select
  country_name,
  country_income_group
from
  wdi_country
where
  lower(country_income_group) = 'low income'
order by
  country_name
""")


```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select distinct country_lending_type
from wdi_country
order by country_lending_type
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
select
  country_lending_type,
  count(*) as num_countries
from
  wdi_country
group by
  country_lending_type
order by
  num_countries desc
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select *
from wdi_country
where lower(country_name) = 'afghanistan'
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)


run_sql_and_return_html(cnx, """
create table same_region_income_category as
select country_code, short_name, region, income_category
from wdi_country
where region = (select region from wdi_country where country_code = 'MHL')
  and income_category = (select income_category from wdi_country where country_code = 'MHL')
  and country_code != 'MHL'
order by short_name;
""")

run_sql_and_return_html(cnx, """
select * from same_region_income_category;
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
select *
from afghanistan
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
WITH CountryCounts AS (
    SELECT
        region,
        income_category,
        COUNT(*) AS country_count
    FROM countries
    GROUP BY region, income_category
),
RegionTotals AS (
    SELECT
        region,
        SUM(country_count) AS sum_region
    FROM CountryCounts
    GROUP BY region
),
IncomeTotals AS (
    SELECT
        income_category,
        SUM(country_count) AS sum_income
    FROM CountryCounts
    GROUP BY income_category
),
TotalCountries AS (
    SELECT COUNT(*) AS total_sum FROM countries
)
SELECT
    cc.region,
    cc.income_category,
    cc.country_count,
    rt.sum_region,
    it.sum_income,
    tc.total_sum,
    ROUND((cc.country_count / tc.total_sum) * 100, 2) AS percent_of_total
FROM CountryCounts cc
JOIN RegionTotals rt ON cc.region = rt.region
JOIN IncomeTotals it ON cc.income_category = it.income_category
JOIN TotalCountries tc""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH CountryCounts AS (
    SELECT
        region,
        income_category,
        COUNT(*) AS country_count
    FROM countries
    GROUP BY region, income_category
),
RegionTotals AS (
    SELECT
        region,
        SUM(country_count) AS sum_region
    FROM CountryCounts
    GROUP BY region
),
IncomeTotals AS (
    SELECT
        income_category,
        SUM(country_count) AS sum_income
    FROM CountryCounts
    GROUP BY income_category
),
TotalCountries AS (
    SELECT COUNT(*) AS total_sum FROM countries
)
SELECT
    cc.region,
    MAX(CASE WHEN cc.income_category = 'Low' THEN ROUND((cc.country_count / tc.total_sum) * 100, 2) END) AS Low_Income,
    MAX(CASE WHEN cc.income_category = 'Middle' THEN ROUND((cc.country_count / tc.total_sum) * 100, 2) END) AS Middle_Income,
    MAX(CASE WHEN cc.income_category = 'High' THEN ROUND((cc.country_count / tc.total_sum) * 100, 2) END) AS High_Income
FROM CountryCounts cc
JOIN RegionTotals rt ON cc.region = rt.region
JOIN TotalCountries tc
GROUP BY cc.region""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
WITH CountryCounts AS (
    SELECT
        income_category,
        COUNT(*) AS country_count
    FROM countries
    GROUP BY income_category
),
TotalCountries AS (
    SELECT COUNT(*) AS total_sum FROM countries
)
SELECT
    cc.income_category,
    cc.country_count,
    tc.total_sum,
    ROUND((cc.country_count / tc.total_sum) * 100, 2) AS percent_of_total
FROM CountryCounts cc
JOIN TotalCountries tc
""")


```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

I feel confident using SELECT, WHERE, and JOIN to get and connect data. I need more practice with harder filters and nested queries. These tasks helped me get better at using SQL to find and organize data.
2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For harder tasks like 19, 20, and 21, I broke the problem into smaller steps like in earlier tasks. I solved one part at a time and fixed errors by checking each step. Next time, I’ll plan my steps before writing the code.

3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

This assignment taught me how useful SQL is for finding answers in data. I learned that small changes in code can really change the results. These skills will help me in real jobs or future classes that use data.



# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

